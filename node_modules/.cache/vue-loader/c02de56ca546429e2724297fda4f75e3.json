{"remainingRequest":"Z:\\progs\\examples\\TT\\testTask\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!Z:\\progs\\examples\\TT\\testTask\\src\\App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"Z:\\progs\\examples\\TT\\testTask\\src\\App.vue","mtime":1606682871959},{"path":"Z:\\progs\\examples\\TT\\testTask\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"Z:\\progs\\examples\\TT\\testTask\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"Z:\\progs\\examples\\TT\\testTask\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"Z:\\progs\\examples\\TT\\testTask\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"Z:\\progs\\examples\\TT\\testTask\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKKiB7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDA7Cn0KI2FwcCB7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmcjsKICBtaW4taGVpZ2h0OiAxMDB2aDsKfQo="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template lang=\"pug\">\n  #app\n    yandex-map(:coords=\"coords\" :zoom=\"9\" @click=\"onClick\" @map-was-initialized=\"mapInit\")\n     ymap-marker(:coords=\"coords\" marker-id=\"123\"  :properties=\"properties\" )\n     ymap-marker(:marker-id=\"1\"\n          marker-type=\"polygon\"\n          :coords=\"[polygon,[]]\"\n          circle-radius=\"16000\"\n          :marker-fill=\"{color: '#1890ff', opacity: 0.9}\"\n          :marker-stroke=\"{color: '#1890ff', width: 1}\"\n          :balloon=\"{header: 'MSC', body: 'MSC', footer: 'MSC'}\")\n</template>\n\n<script>\nimport { loadYmap } from 'vue-yandex-maps'\nimport mkadArray from './store/modules/MKAD.js'\nimport { sortBy } from 'lodash'\nexport default {\n\n  data: () => ({\n    coords: [\n      55.76,\n      37.64\n    ],\n    properties: {\n    },\n    polygon: mkadArray.map((i) => i.reverse()),\n    ySettings: {}\n  }),\n  methods: {\n    async onClick (e) {\n      this.coords = e.get('coords')\n      this.getAddress(this.coords)\n      const closestDistance = await this.getClosestDistance(this.coords)\n      this.setRoute(e, closestDistance)\n    },\n    getAddress (coords) {\n      this.properties.iconCaption = 'поиск...'\n      // eslint-disable-next-line no-undef\n      ymaps.geocode(coords).then(res => {\n        var firstGeoObject = res.geoObjects.get(0)\n\n        this.properties = {\n          // Формируем строку с данными об объекте.\n          iconCaption: [\n            // Название населенного пункта или вышестоящее административно-территориальное образование.\n            firstGeoObject.getLocalities().length ? firstGeoObject.getLocalities() : firstGeoObject.getAdministrativeAreas(),\n            // Получаем путь до топонима, если метод вернул null, запрашиваем наименование здания.\n            firstGeoObject.getThoroughfare() || firstGeoObject.getPremise()\n          ].join(', '),\n          // В качестве контента балуна задаем строку с адресом объекта.\n          balloonContent: firstGeoObject.getAddressLine()\n        }\n      })\n    },\n    mapInit (map) {\n      this.mscMap = map\n    },\n    getClosestDistance (currentPoint) {\n      const object = []\n      this.polygon.forEach((coords) => {\n        const r = 6371 // Радиус земли\n        const dLat = (currentPoint[0].toFixed(6) - coords[0]) * (Math.PI / 180)\n        const dLon = (currentPoint[1].toFixed(6) - coords[1]) * (Math.PI / 180)\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(coords[0] * (Math.PI / 180)) * Math.cos(currentPoint[0] * (Math.PI / 180)) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2)\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n        const distance = r * c\n        object.push({ distance, coords })\n      })\n      return object\n    },\n    setRoute (e, closestDistance) {\n      const selectPoint = sortBy(closestDistance, 'distance')[0]\n      // eslint-disable-next-line no-undef\n      ymaps.route([e.get('coords'), selectPoint.coords]).then((router) => {\n        const distance = router.getLength()\n        console.log(distance)\n        console.log('info', this.route)\n        console.log(this.mscMap)\n        if (this.route) this.mscMap.geoObjects.remove(this.route)\n        this.route = router.getPaths()\n        this.route.options.set({ strokeWidth: 5, strokeColor: '227f05', opacity: 0.7 })\n        this.mscMap.geoObjects.add(this.route)\n      }, (error) => {\n        console.log(error)\n      })\n    }\n  },\n  mounted: {\n    async mounted () {\n      await loadYmap()\n    }\n  }\n}\n</script>\n\n<style>\n* {\n  margin: 0;\n  padding: 0;\n}\n#app {\n  display: grid;\n  grid-template-rows: 1fr;\n  min-height: 100vh;\n}\n</style>\n"]}]}